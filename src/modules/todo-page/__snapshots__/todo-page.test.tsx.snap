// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`todo-page should render with given state from Redux store 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "payload": undefined,
              "type": "todo/loadTodos",
            },
          ],
          Array [
            Object {
              "payload": undefined,
              "type": "todo/getUsername",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(TodoPage)>
    <TodoPage
      addTodo={[Function]}
      changeOrder={[Function]}
      delete={[Function]}
      done={[Function]}
      getUseraname={[Function]}
      important={[Function]}
      loadTodos={[Function]}
    >
      <Styled(div)>
        <div
          className="css-1sebohw"
        >
          <Header
            isAuth={false}
          >
            <WithStyles(ForwardRef(AppBar))
              position="sticky"
            >
              <ForwardRef(AppBar)
                classes={
                  Object {
                    "colorDefault": "MuiAppBar-colorDefault",
                    "colorInherit": "MuiAppBar-colorInherit",
                    "colorPrimary": "MuiAppBar-colorPrimary",
                    "colorSecondary": "MuiAppBar-colorSecondary",
                    "colorTransparent": "MuiAppBar-colorTransparent",
                    "positionAbsolute": "MuiAppBar-positionAbsolute",
                    "positionFixed": "MuiAppBar-positionFixed",
                    "positionRelative": "MuiAppBar-positionRelative",
                    "positionStatic": "MuiAppBar-positionStatic",
                    "positionSticky": "MuiAppBar-positionSticky",
                    "root": "MuiAppBar-root",
                  }
                }
                position="sticky"
              >
                <WithStyles(ForwardRef(Paper))
                  className="MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary"
                  component="header"
                  elevation={4}
                  square={true}
                >
                  <ForwardRef(Paper)
                    className="MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary"
                    classes={
                      Object {
                        "elevation0": "MuiPaper-elevation0",
                        "elevation1": "MuiPaper-elevation1",
                        "elevation10": "MuiPaper-elevation10",
                        "elevation11": "MuiPaper-elevation11",
                        "elevation12": "MuiPaper-elevation12",
                        "elevation13": "MuiPaper-elevation13",
                        "elevation14": "MuiPaper-elevation14",
                        "elevation15": "MuiPaper-elevation15",
                        "elevation16": "MuiPaper-elevation16",
                        "elevation17": "MuiPaper-elevation17",
                        "elevation18": "MuiPaper-elevation18",
                        "elevation19": "MuiPaper-elevation19",
                        "elevation2": "MuiPaper-elevation2",
                        "elevation20": "MuiPaper-elevation20",
                        "elevation21": "MuiPaper-elevation21",
                        "elevation22": "MuiPaper-elevation22",
                        "elevation23": "MuiPaper-elevation23",
                        "elevation24": "MuiPaper-elevation24",
                        "elevation3": "MuiPaper-elevation3",
                        "elevation4": "MuiPaper-elevation4",
                        "elevation5": "MuiPaper-elevation5",
                        "elevation6": "MuiPaper-elevation6",
                        "elevation7": "MuiPaper-elevation7",
                        "elevation8": "MuiPaper-elevation8",
                        "elevation9": "MuiPaper-elevation9",
                        "outlined": "MuiPaper-outlined",
                        "root": "MuiPaper-root",
                        "rounded": "MuiPaper-rounded",
                      }
                    }
                    component="header"
                    elevation={4}
                    square={true}
                  >
                    <header
                      className="MuiPaper-root MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary MuiPaper-elevation4"
                    >
                      <WithStyles(ForwardRef(Toolbar))>
                        <ForwardRef(Toolbar)
                          classes={
                            Object {
                              "dense": "MuiToolbar-dense",
                              "gutters": "MuiToolbar-gutters",
                              "regular": "MuiToolbar-regular",
                              "root": "MuiToolbar-root",
                            }
                          }
                        >
                          <div
                            className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                          >
                            <WithStyles(ForwardRef(Typography))
                              className="makeStyles-title-1"
                              variant="h6"
                            >
                              <ForwardRef(Typography)
                                className="makeStyles-title-1"
                                classes={
                                  Object {
                                    "alignCenter": "MuiTypography-alignCenter",
                                    "alignJustify": "MuiTypography-alignJustify",
                                    "alignLeft": "MuiTypography-alignLeft",
                                    "alignRight": "MuiTypography-alignRight",
                                    "body1": "MuiTypography-body1",
                                    "body2": "MuiTypography-body2",
                                    "button": "MuiTypography-button",
                                    "caption": "MuiTypography-caption",
                                    "colorError": "MuiTypography-colorError",
                                    "colorInherit": "MuiTypography-colorInherit",
                                    "colorPrimary": "MuiTypography-colorPrimary",
                                    "colorSecondary": "MuiTypography-colorSecondary",
                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                    "displayBlock": "MuiTypography-displayBlock",
                                    "displayInline": "MuiTypography-displayInline",
                                    "gutterBottom": "MuiTypography-gutterBottom",
                                    "h1": "MuiTypography-h1",
                                    "h2": "MuiTypography-h2",
                                    "h3": "MuiTypography-h3",
                                    "h4": "MuiTypography-h4",
                                    "h5": "MuiTypography-h5",
                                    "h6": "MuiTypography-h6",
                                    "noWrap": "MuiTypography-noWrap",
                                    "overline": "MuiTypography-overline",
                                    "paragraph": "MuiTypography-paragraph",
                                    "root": "MuiTypography-root",
                                    "srOnly": "MuiTypography-srOnly",
                                    "subtitle1": "MuiTypography-subtitle1",
                                    "subtitle2": "MuiTypography-subtitle2",
                                  }
                                }
                                variant="h6"
                              >
                                <h6
                                  className="MuiTypography-root makeStyles-title-1 MuiTypography-h6"
                                >
                                  Todo App
                                </h6>
                              </ForwardRef(Typography)>
                            </WithStyles(ForwardRef(Typography))>
                            <WithStyles(ForwardRef(Button))
                              className="makeStyles-label-2"
                              color="secondary"
                              onClick={[Function]}
                              size="small"
                              variant="contained"
                            >
                              <ForwardRef(Button)
                                className="makeStyles-label-2"
                                classes={
                                  Object {
                                    "colorInherit": "MuiButton-colorInherit",
                                    "contained": "MuiButton-contained",
                                    "containedPrimary": "MuiButton-containedPrimary",
                                    "containedSecondary": "MuiButton-containedSecondary",
                                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                                    "disableElevation": "MuiButton-disableElevation",
                                    "disabled": "Mui-disabled",
                                    "endIcon": "MuiButton-endIcon",
                                    "focusVisible": "Mui-focusVisible",
                                    "fullWidth": "MuiButton-fullWidth",
                                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                                    "label": "MuiButton-label",
                                    "outlined": "MuiButton-outlined",
                                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                    "root": "MuiButton-root",
                                    "sizeLarge": "MuiButton-sizeLarge",
                                    "sizeSmall": "MuiButton-sizeSmall",
                                    "startIcon": "MuiButton-startIcon",
                                    "text": "MuiButton-text",
                                    "textPrimary": "MuiButton-textPrimary",
                                    "textSecondary": "MuiButton-textSecondary",
                                    "textSizeLarge": "MuiButton-textSizeLarge",
                                    "textSizeSmall": "MuiButton-textSizeSmall",
                                  }
                                }
                                color="secondary"
                                onClick={[Function]}
                                size="small"
                                variant="contained"
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  className="MuiButton-root MuiButton-contained makeStyles-label-2 MuiButton-containedSecondary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                                  component="button"
                                  disabled={false}
                                  focusRipple={true}
                                  focusVisibleClassName="Mui-focusVisible"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ForwardRef(ButtonBase)
                                    className="MuiButton-root MuiButton-contained makeStyles-label-2 MuiButton-containedSecondary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-label-2 MuiButton-containedSecondary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiButton-label"
                                      >
                                        LogIn
                                      </span>
                                      <WithStyles(memo)
                                        center={false}
                                      >
                                        <ForwardRef(TouchRipple)
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child",
                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                              "ripple": "MuiTouchRipple-ripple",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                              "root": "MuiTouchRipple-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="MuiTouchRipple-root"
                                          >
                                            <TransitionGroup
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef(TouchRipple)>
                                      </WithStyles(memo)>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(Button)>
                            </WithStyles(ForwardRef(Button))>
                          </div>
                        </ForwardRef(Toolbar)>
                      </WithStyles(ForwardRef(Toolbar))>
                    </header>
                  </ForwardRef(Paper)>
                </WithStyles(ForwardRef(Paper))>
              </ForwardRef(AppBar)>
            </WithStyles(ForwardRef(AppBar))>
          </Header>
          <ErrorBoundry>
            <h1>
              Something wrong!
            </h1>
          </ErrorBoundry>
        </div>
      </Styled(div)>
    </TodoPage>
  </Connect(TodoPage)>
</Provider>
`;
