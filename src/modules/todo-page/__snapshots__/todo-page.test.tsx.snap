// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`todo-page should render with given state from Redux store 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "payload": undefined,
              "type": "todo/loadTodos",
            },
          ],
          Array [
            Object {
              "payload": undefined,
              "type": "todo/getUsername",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(TodoPage)>
    <TodoPage
      addTodo={[Function]}
      changeOrder={[Function]}
      delete={[Function]}
      done={[Function]}
      getUseraname={[Function]}
      important={[Function]}
      loadTodos={[Function]}
    >
      <Styled(div)>
        <div
          className="css-1sebohw"
        >
          <Header
            isAuth={false}
          >
            <WithStyles(ForwardRef(AppBar))
              position="sticky"
            >
              <ForwardRef(AppBar)
                classes={
                  Object {
                    "colorDefault": "MuiAppBar-colorDefault",
                    "colorInherit": "MuiAppBar-colorInherit",
                    "colorPrimary": "MuiAppBar-colorPrimary",
                    "colorSecondary": "MuiAppBar-colorSecondary",
                    "colorTransparent": "MuiAppBar-colorTransparent",
                    "positionAbsolute": "MuiAppBar-positionAbsolute",
                    "positionFixed": "MuiAppBar-positionFixed",
                    "positionRelative": "MuiAppBar-positionRelative",
                    "positionStatic": "MuiAppBar-positionStatic",
                    "positionSticky": "MuiAppBar-positionSticky",
                    "root": "MuiAppBar-root",
                  }
                }
                position="sticky"
              >
                <WithStyles(ForwardRef(Paper))
                  className="MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary"
                  component="header"
                  elevation={4}
                  square={true}
                >
                  <ForwardRef(Paper)
                    className="MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary"
                    classes={
                      Object {
                        "elevation0": "MuiPaper-elevation0",
                        "elevation1": "MuiPaper-elevation1",
                        "elevation10": "MuiPaper-elevation10",
                        "elevation11": "MuiPaper-elevation11",
                        "elevation12": "MuiPaper-elevation12",
                        "elevation13": "MuiPaper-elevation13",
                        "elevation14": "MuiPaper-elevation14",
                        "elevation15": "MuiPaper-elevation15",
                        "elevation16": "MuiPaper-elevation16",
                        "elevation17": "MuiPaper-elevation17",
                        "elevation18": "MuiPaper-elevation18",
                        "elevation19": "MuiPaper-elevation19",
                        "elevation2": "MuiPaper-elevation2",
                        "elevation20": "MuiPaper-elevation20",
                        "elevation21": "MuiPaper-elevation21",
                        "elevation22": "MuiPaper-elevation22",
                        "elevation23": "MuiPaper-elevation23",
                        "elevation24": "MuiPaper-elevation24",
                        "elevation3": "MuiPaper-elevation3",
                        "elevation4": "MuiPaper-elevation4",
                        "elevation5": "MuiPaper-elevation5",
                        "elevation6": "MuiPaper-elevation6",
                        "elevation7": "MuiPaper-elevation7",
                        "elevation8": "MuiPaper-elevation8",
                        "elevation9": "MuiPaper-elevation9",
                        "outlined": "MuiPaper-outlined",
                        "root": "MuiPaper-root",
                        "rounded": "MuiPaper-rounded",
                      }
                    }
                    component="header"
                    elevation={4}
                    square={true}
                  >
                    <header
                      className="MuiPaper-root MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary MuiPaper-elevation4"
                    >
                      <WithStyles(ForwardRef(Toolbar))>
                        <ForwardRef(Toolbar)
                          classes={
                            Object {
                              "dense": "MuiToolbar-dense",
                              "gutters": "MuiToolbar-gutters",
                              "regular": "MuiToolbar-regular",
                              "root": "MuiToolbar-root",
                            }
                          }
                        >
                          <div
                            className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                          >
                            <WithStyles(ForwardRef(Typography))
                              className="makeStyles-title-1"
                              variant="h6"
                            >
                              <ForwardRef(Typography)
                                className="makeStyles-title-1"
                                classes={
                                  Object {
                                    "alignCenter": "MuiTypography-alignCenter",
                                    "alignJustify": "MuiTypography-alignJustify",
                                    "alignLeft": "MuiTypography-alignLeft",
                                    "alignRight": "MuiTypography-alignRight",
                                    "body1": "MuiTypography-body1",
                                    "body2": "MuiTypography-body2",
                                    "button": "MuiTypography-button",
                                    "caption": "MuiTypography-caption",
                                    "colorError": "MuiTypography-colorError",
                                    "colorInherit": "MuiTypography-colorInherit",
                                    "colorPrimary": "MuiTypography-colorPrimary",
                                    "colorSecondary": "MuiTypography-colorSecondary",
                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                    "displayBlock": "MuiTypography-displayBlock",
                                    "displayInline": "MuiTypography-displayInline",
                                    "gutterBottom": "MuiTypography-gutterBottom",
                                    "h1": "MuiTypography-h1",
                                    "h2": "MuiTypography-h2",
                                    "h3": "MuiTypography-h3",
                                    "h4": "MuiTypography-h4",
                                    "h5": "MuiTypography-h5",
                                    "h6": "MuiTypography-h6",
                                    "noWrap": "MuiTypography-noWrap",
                                    "overline": "MuiTypography-overline",
                                    "paragraph": "MuiTypography-paragraph",
                                    "root": "MuiTypography-root",
                                    "srOnly": "MuiTypography-srOnly",
                                    "subtitle1": "MuiTypography-subtitle1",
                                    "subtitle2": "MuiTypography-subtitle2",
                                  }
                                }
                                variant="h6"
                              >
                                <h6
                                  className="MuiTypography-root makeStyles-title-1 MuiTypography-h6"
                                >
                                  Todo App
                                </h6>
                              </ForwardRef(Typography)>
                            </WithStyles(ForwardRef(Typography))>
                            <WithStyles(ForwardRef(Button))
                              className="makeStyles-label-2"
                              color="secondary"
                              onClick={[Function]}
                              size="small"
                              variant="contained"
                            >
                              <ForwardRef(Button)
                                className="makeStyles-label-2"
                                classes={
                                  Object {
                                    "colorInherit": "MuiButton-colorInherit",
                                    "contained": "MuiButton-contained",
                                    "containedPrimary": "MuiButton-containedPrimary",
                                    "containedSecondary": "MuiButton-containedSecondary",
                                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                                    "disableElevation": "MuiButton-disableElevation",
                                    "disabled": "Mui-disabled",
                                    "endIcon": "MuiButton-endIcon",
                                    "focusVisible": "Mui-focusVisible",
                                    "fullWidth": "MuiButton-fullWidth",
                                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                                    "label": "MuiButton-label",
                                    "outlined": "MuiButton-outlined",
                                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                    "root": "MuiButton-root",
                                    "sizeLarge": "MuiButton-sizeLarge",
                                    "sizeSmall": "MuiButton-sizeSmall",
                                    "startIcon": "MuiButton-startIcon",
                                    "text": "MuiButton-text",
                                    "textPrimary": "MuiButton-textPrimary",
                                    "textSecondary": "MuiButton-textSecondary",
                                    "textSizeLarge": "MuiButton-textSizeLarge",
                                    "textSizeSmall": "MuiButton-textSizeSmall",
                                  }
                                }
                                color="secondary"
                                onClick={[Function]}
                                size="small"
                                variant="contained"
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  className="MuiButton-root MuiButton-contained makeStyles-label-2 MuiButton-containedSecondary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                                  component="button"
                                  disabled={false}
                                  focusRipple={true}
                                  focusVisibleClassName="Mui-focusVisible"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ForwardRef(ButtonBase)
                                    className="MuiButton-root MuiButton-contained makeStyles-label-2 MuiButton-containedSecondary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-label-2 MuiButton-containedSecondary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiButton-label"
                                      >
                                        LogIn
                                      </span>
                                      <WithStyles(memo)
                                        center={false}
                                      >
                                        <ForwardRef(TouchRipple)
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child",
                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                              "ripple": "MuiTouchRipple-ripple",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                              "root": "MuiTouchRipple-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="MuiTouchRipple-root"
                                          >
                                            <TransitionGroup
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef(TouchRipple)>
                                      </WithStyles(memo)>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(Button)>
                            </WithStyles(ForwardRef(Button))>
                          </div>
                        </ForwardRef(Toolbar)>
                      </WithStyles(ForwardRef(Toolbar))>
                    </header>
                  </ForwardRef(Paper)>
                </WithStyles(ForwardRef(Paper))>
              </ForwardRef(AppBar)>
            </WithStyles(ForwardRef(AppBar))>
          </Header>
          <ErrorBoundry>
            <OrderSelect
              onOrderChange={[Function]}
            >
              <Styled(div)>
                <div
                  className="css-1okyg98"
                >
                  <WithStyles(ForwardRef(FormControl))
                    size="small"
                    variant="standard"
                  >
                    <ForwardRef(FormControl)
                      classes={
                        Object {
                          "fullWidth": "MuiFormControl-fullWidth",
                          "marginDense": "MuiFormControl-marginDense",
                          "marginNormal": "MuiFormControl-marginNormal",
                          "root": "MuiFormControl-root",
                        }
                      }
                      size="small"
                      variant="standard"
                    >
                      <div
                        className="MuiFormControl-root"
                      >
                        <WithStyles(ForwardRef(InputLabel))
                          id="labelId"
                        >
                          <ForwardRef(InputLabel)
                            classes={
                              Object {
                                "animated": "MuiInputLabel-animated",
                                "asterisk": "MuiInputLabel-asterisk",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "filled": "MuiInputLabel-filled",
                                "focused": "Mui-focused",
                                "formControl": "MuiInputLabel-formControl",
                                "marginDense": "MuiInputLabel-marginDense",
                                "outlined": "MuiInputLabel-outlined",
                                "required": "Mui-required",
                                "root": "MuiInputLabel-root",
                                "shrink": "MuiInputLabel-shrink",
                              }
                            }
                            id="labelId"
                          >
                            <WithStyles(ForwardRef(FormLabel))
                              className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense"
                              classes={
                                Object {
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "required": "Mui-required",
                                }
                              }
                              data-shrink={false}
                              id="labelId"
                            >
                              <ForwardRef(FormLabel)
                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense"
                                classes={
                                  Object {
                                    "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                    "colorSecondary": "MuiFormLabel-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "filled": "MuiFormLabel-filled",
                                    "focused": "Mui-focused Mui-focused",
                                    "required": "Mui-required Mui-required",
                                    "root": "MuiFormLabel-root",
                                  }
                                }
                                data-shrink={false}
                                id="labelId"
                              >
                                <label
                                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense"
                                  data-shrink={false}
                                  id="labelId"
                                >
                                  Сортировка
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(Select))
                          className="order-select"
                          labelId="labelId"
                          onChange={[Function]}
                        >
                          <ForwardRef(Select)
                            className="order-select"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "filled": "MuiSelect-filled",
                                "icon": "MuiSelect-icon",
                                "iconFilled": "MuiSelect-iconFilled",
                                "iconOpen": "MuiSelect-iconOpen",
                                "iconOutlined": "MuiSelect-iconOutlined",
                                "nativeInput": "MuiSelect-nativeInput",
                                "outlined": "MuiSelect-outlined",
                                "root": "MuiSelect-root",
                                "select": "MuiSelect-select",
                                "selectMenu": "MuiSelect-selectMenu",
                              }
                            }
                            labelId="labelId"
                            onChange={[Function]}
                          >
                            <WithStyles(ForwardRef(Input))
                              className="order-select"
                              inputComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "IconComponent": [Function],
                                    "MenuProps": [Function],
                                    "SelectDisplayProps": [Function],
                                    "aria-label": [Function],
                                    "autoFocus": [Function],
                                    "autoWidth": [Function],
                                    "children": [Function],
                                    "className": [Function],
                                    "classes": [Function],
                                    "defaultValue": [Function],
                                    "disabled": [Function],
                                    "displayEmpty": [Function],
                                    "inputRef": [Function],
                                    "labelId": [Function],
                                    "multiple": [Function],
                                    "name": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onClose": [Function],
                                    "onFocus": [Function],
                                    "onOpen": [Function],
                                    "open": [Function],
                                    "readOnly": [Function],
                                    "renderValue": [Function],
                                    "tabIndex": [Function],
                                    "type": [Function],
                                    "value": [Function],
                                    "variant": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              inputProps={
                                Object {
                                  "IconComponent": Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": null,
                                    "type": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                  },
                                  "MenuProps": undefined,
                                  "SelectDisplayProps": Object {
                                    "id": undefined,
                                  },
                                  "autoWidth": false,
                                  "children": Array [
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="ASC"
                                    >
                                      По возрастанию
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="DESC"
                                    >
                                      По убыванию
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="IMPORTANT"
                                    >
                                      Важные
                                    </WithStyles(ForwardRef(MenuItem))>,
                                  ],
                                  "classes": Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOpen": "MuiSelect-iconOpen",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "nativeInput": "MuiSelect-nativeInput",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  },
                                  "displayEmpty": false,
                                  "labelId": "labelId",
                                  "multiple": false,
                                  "onClose": undefined,
                                  "onOpen": undefined,
                                  "open": undefined,
                                  "renderValue": undefined,
                                  "type": undefined,
                                  "variant": "standard",
                                }
                              }
                              onChange={[Function]}
                            >
                              <ForwardRef(Input)
                                className="order-select"
                                classes={
                                  Object {
                                    "colorSecondary": "MuiInput-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInput-formControl",
                                    "fullWidth": "MuiInput-fullWidth",
                                    "input": "MuiInput-input",
                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInput-marginDense",
                                    "multiline": "MuiInput-multiline",
                                    "root": "MuiInput-root",
                                    "underline": "MuiInput-underline",
                                  }
                                }
                                inputComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "IconComponent": [Function],
                                      "MenuProps": [Function],
                                      "SelectDisplayProps": [Function],
                                      "aria-label": [Function],
                                      "autoFocus": [Function],
                                      "autoWidth": [Function],
                                      "children": [Function],
                                      "className": [Function],
                                      "classes": [Function],
                                      "defaultValue": [Function],
                                      "disabled": [Function],
                                      "displayEmpty": [Function],
                                      "inputRef": [Function],
                                      "labelId": [Function],
                                      "multiple": [Function],
                                      "name": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onClose": [Function],
                                      "onFocus": [Function],
                                      "onOpen": [Function],
                                      "open": [Function],
                                      "readOnly": [Function],
                                      "renderValue": [Function],
                                      "tabIndex": [Function],
                                      "type": [Function],
                                      "value": [Function],
                                      "variant": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                inputProps={
                                  Object {
                                    "IconComponent": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "MenuProps": undefined,
                                    "SelectDisplayProps": Object {
                                      "id": undefined,
                                    },
                                    "autoWidth": false,
                                    "children": Array [
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="ASC"
                                      >
                                        По возрастанию
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="DESC"
                                      >
                                        По убыванию
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="IMPORTANT"
                                      >
                                        Важные
                                      </WithStyles(ForwardRef(MenuItem))>,
                                    ],
                                    "classes": Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "nativeInput": "MuiSelect-nativeInput",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    },
                                    "displayEmpty": false,
                                    "labelId": "labelId",
                                    "multiple": false,
                                    "onClose": undefined,
                                    "onOpen": undefined,
                                    "open": undefined,
                                    "renderValue": undefined,
                                    "type": undefined,
                                    "variant": "standard",
                                  }
                                }
                                onChange={[Function]}
                              >
                                <WithStyles(ForwardRef(InputBase))
                                  className="order-select"
                                  classes={
                                    Object {
                                      "colorSecondary": "MuiInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInput-formControl",
                                      "fullWidth": "MuiInput-fullWidth",
                                      "input": "MuiInput-input",
                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInput-inputMultiline",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInput-marginDense",
                                      "multiline": "MuiInput-multiline",
                                      "root": "MuiInput-root MuiInput-underline",
                                      "underline": null,
                                    }
                                  }
                                  fullWidth={false}
                                  inputComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "IconComponent": [Function],
                                        "MenuProps": [Function],
                                        "SelectDisplayProps": [Function],
                                        "aria-label": [Function],
                                        "autoFocus": [Function],
                                        "autoWidth": [Function],
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "defaultValue": [Function],
                                        "disabled": [Function],
                                        "displayEmpty": [Function],
                                        "inputRef": [Function],
                                        "labelId": [Function],
                                        "multiple": [Function],
                                        "name": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onClose": [Function],
                                        "onFocus": [Function],
                                        "onOpen": [Function],
                                        "open": [Function],
                                        "readOnly": [Function],
                                        "renderValue": [Function],
                                        "tabIndex": [Function],
                                        "type": [Function],
                                        "value": [Function],
                                        "variant": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  inputProps={
                                    Object {
                                      "IconComponent": Object {
                                        "$$typeof": Symbol(react.memo),
                                        "compare": null,
                                        "type": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        },
                                      },
                                      "MenuProps": undefined,
                                      "SelectDisplayProps": Object {
                                        "id": undefined,
                                      },
                                      "autoWidth": false,
                                      "children": Array [
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="ASC"
                                        >
                                          По возрастанию
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="DESC"
                                        >
                                          По убыванию
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="IMPORTANT"
                                        >
                                          Важные
                                        </WithStyles(ForwardRef(MenuItem))>,
                                      ],
                                      "classes": Object {
                                        "disabled": "Mui-disabled",
                                        "filled": "MuiSelect-filled",
                                        "icon": "MuiSelect-icon",
                                        "iconFilled": "MuiSelect-iconFilled",
                                        "iconOpen": "MuiSelect-iconOpen",
                                        "iconOutlined": "MuiSelect-iconOutlined",
                                        "nativeInput": "MuiSelect-nativeInput",
                                        "outlined": "MuiSelect-outlined",
                                        "root": "MuiSelect-root",
                                        "select": "MuiSelect-select",
                                        "selectMenu": "MuiSelect-selectMenu",
                                      },
                                      "displayEmpty": false,
                                      "labelId": "labelId",
                                      "multiple": false,
                                      "onClose": undefined,
                                      "onOpen": undefined,
                                      "open": undefined,
                                      "renderValue": undefined,
                                      "type": undefined,
                                      "variant": "standard",
                                    }
                                  }
                                  multiline={false}
                                  onChange={[Function]}
                                  type="text"
                                >
                                  <ForwardRef(InputBase)
                                    className="order-select"
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                        "adornedStart": "MuiInputBase-adornedStart",
                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "focused": "Mui-focused Mui-focused",
                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                        "input": "MuiInputBase-input MuiInput-input",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                        "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                      }
                                    }
                                    fullWidth={false}
                                    inputComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "IconComponent": [Function],
                                          "MenuProps": [Function],
                                          "SelectDisplayProps": [Function],
                                          "aria-label": [Function],
                                          "autoFocus": [Function],
                                          "autoWidth": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "defaultValue": [Function],
                                          "disabled": [Function],
                                          "displayEmpty": [Function],
                                          "inputRef": [Function],
                                          "labelId": [Function],
                                          "multiple": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onClose": [Function],
                                          "onFocus": [Function],
                                          "onOpen": [Function],
                                          "open": [Function],
                                          "readOnly": [Function],
                                          "renderValue": [Function],
                                          "tabIndex": [Function],
                                          "type": [Function],
                                          "value": [Function],
                                          "variant": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    inputProps={
                                      Object {
                                        "IconComponent": Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        },
                                        "MenuProps": undefined,
                                        "SelectDisplayProps": Object {
                                          "id": undefined,
                                        },
                                        "autoWidth": false,
                                        "children": Array [
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="ASC"
                                          >
                                            По возрастанию
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="DESC"
                                          >
                                            По убыванию
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="IMPORTANT"
                                          >
                                            Важные
                                          </WithStyles(ForwardRef(MenuItem))>,
                                        ],
                                        "classes": Object {
                                          "disabled": "Mui-disabled",
                                          "filled": "MuiSelect-filled",
                                          "icon": "MuiSelect-icon",
                                          "iconFilled": "MuiSelect-iconFilled",
                                          "iconOpen": "MuiSelect-iconOpen",
                                          "iconOutlined": "MuiSelect-iconOutlined",
                                          "nativeInput": "MuiSelect-nativeInput",
                                          "outlined": "MuiSelect-outlined",
                                          "root": "MuiSelect-root",
                                          "select": "MuiSelect-select",
                                          "selectMenu": "MuiSelect-selectMenu",
                                        },
                                        "displayEmpty": false,
                                        "labelId": "labelId",
                                        "multiple": false,
                                        "onClose": undefined,
                                        "onOpen": undefined,
                                        "open": undefined,
                                        "renderValue": undefined,
                                        "type": undefined,
                                        "variant": "standard",
                                      }
                                    }
                                    multiline={false}
                                    onChange={[Function]}
                                    type="text"
                                  >
                                    <div
                                      className="MuiInputBase-root MuiInput-root MuiInput-underline order-select MuiInputBase-formControl MuiInput-formControl MuiInputBase-marginDense MuiInput-marginDense"
                                      onClick={[Function]}
                                    >
                                      <ForwardRef(SelectInput)
                                        IconComponent={
                                          Object {
                                            "$$typeof": Symbol(react.memo),
                                            "compare": null,
                                            "type": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "render": [Function],
                                            },
                                          }
                                        }
                                        SelectDisplayProps={
                                          Object {
                                            "id": undefined,
                                          }
                                        }
                                        aria-invalid={false}
                                        autoWidth={false}
                                        className="MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                        classes={
                                          Object {
                                            "disabled": "Mui-disabled",
                                            "filled": "MuiSelect-filled",
                                            "icon": "MuiSelect-icon",
                                            "iconFilled": "MuiSelect-iconFilled",
                                            "iconOpen": "MuiSelect-iconOpen",
                                            "iconOutlined": "MuiSelect-iconOutlined",
                                            "nativeInput": "MuiSelect-nativeInput",
                                            "outlined": "MuiSelect-outlined",
                                            "root": "MuiSelect-root",
                                            "select": "MuiSelect-select",
                                            "selectMenu": "MuiSelect-selectMenu",
                                          }
                                        }
                                        disabled={false}
                                        displayEmpty={false}
                                        inputRef={[Function]}
                                        labelId="labelId"
                                        multiple={false}
                                        onAnimationStart={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        variant="standard"
                                      >
                                        <div
                                          aria-haspopup="listbox"
                                          aria-labelledby="labelId"
                                          className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          onMouseDown={[Function]}
                                          role="button"
                                          tabIndex={0}
                                        >
                                          <span
                                            dangerouslySetInnerHTML={
                                              Object {
                                                "__html": "&#8203;",
                                              }
                                            }
                                          />
                                        </div>
                                        <input
                                          aria-hidden={true}
                                          className="MuiSelect-nativeInput"
                                          onAnimationStart={[Function]}
                                          onChange={[Function]}
                                          required={false}
                                          tabIndex={-1}
                                        />
                                        <ForwardRef(ArrowDropDownIcon)
                                          className="MuiSelect-icon"
                                        >
                                          <WithStyles(ForwardRef(SvgIcon))
                                            className="MuiSelect-icon"
                                          >
                                            <ForwardRef(SvgIcon)
                                              className="MuiSelect-icon"
                                              classes={
                                                Object {
                                                  "colorAction": "MuiSvgIcon-colorAction",
                                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                  "colorError": "MuiSvgIcon-colorError",
                                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                  "root": "MuiSvgIcon-root",
                                                }
                                              }
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="MuiSvgIcon-root MuiSelect-icon"
                                                focusable="false"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M7 10l5 5 5-5z"
                                                />
                                              </svg>
                                            </ForwardRef(SvgIcon)>
                                          </WithStyles(ForwardRef(SvgIcon))>
                                        </ForwardRef(ArrowDropDownIcon)>
                                        <WithStyles(ForwardRef(Menu))
                                          MenuListProps={
                                            Object {
                                              "aria-labelledby": "labelId",
                                              "disableListWrap": true,
                                              "role": "listbox",
                                            }
                                          }
                                          PaperProps={
                                            Object {
                                              "style": Object {
                                                "minWidth": undefined,
                                              },
                                            }
                                          }
                                          anchorEl={
                                            <div
                                              aria-haspopup="listbox"
                                              aria-labelledby="labelId"
                                              class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                              role="button"
                                              tabindex="0"
                                            >
                                              <span>
                                                ​
                                              </span>
                                            </div>
                                          }
                                          id="menu-"
                                          onClose={[Function]}
                                          open={false}
                                        >
                                          <ForwardRef(Menu)
                                            MenuListProps={
                                              Object {
                                                "aria-labelledby": "labelId",
                                                "disableListWrap": true,
                                                "role": "listbox",
                                              }
                                            }
                                            PaperProps={
                                              Object {
                                                "style": Object {
                                                  "minWidth": undefined,
                                                },
                                              }
                                            }
                                            anchorEl={
                                              <div
                                                aria-haspopup="listbox"
                                                aria-labelledby="labelId"
                                                class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                                role="button"
                                                tabindex="0"
                                              >
                                                <span>
                                                  ​
                                                </span>
                                              </div>
                                            }
                                            classes={
                                              Object {
                                                "list": "MuiMenu-list",
                                                "paper": "MuiMenu-paper",
                                              }
                                            }
                                            id="menu-"
                                            onClose={[Function]}
                                            open={false}
                                          >
                                            <WithStyles(ForwardRef(Popover))
                                              PaperProps={
                                                Object {
                                                  "classes": Object {
                                                    "root": "MuiMenu-paper",
                                                  },
                                                  "style": Object {
                                                    "minWidth": undefined,
                                                  },
                                                }
                                              }
                                              anchorEl={
                                                <div
                                                  aria-haspopup="listbox"
                                                  aria-labelledby="labelId"
                                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                                  role="button"
                                                  tabindex="0"
                                                >
                                                  <span>
                                                    ​
                                                  </span>
                                                </div>
                                              }
                                              anchorOrigin={
                                                Object {
                                                  "horizontal": "left",
                                                  "vertical": "top",
                                                }
                                              }
                                              getContentAnchorEl={[Function]}
                                              id="menu-"
                                              onClose={[Function]}
                                              onEntering={[Function]}
                                              open={false}
                                              transformOrigin={
                                                Object {
                                                  "horizontal": "left",
                                                  "vertical": "top",
                                                }
                                              }
                                              transitionDuration="auto"
                                            >
                                              <ForwardRef(Popover)
                                                PaperProps={
                                                  Object {
                                                    "classes": Object {
                                                      "root": "MuiMenu-paper",
                                                    },
                                                    "style": Object {
                                                      "minWidth": undefined,
                                                    },
                                                  }
                                                }
                                                anchorEl={
                                                  <div
                                                    aria-haspopup="listbox"
                                                    aria-labelledby="labelId"
                                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                                    role="button"
                                                    tabindex="0"
                                                  >
                                                    <span>
                                                      ​
                                                    </span>
                                                  </div>
                                                }
                                                anchorOrigin={
                                                  Object {
                                                    "horizontal": "left",
                                                    "vertical": "top",
                                                  }
                                                }
                                                classes={
                                                  Object {
                                                    "paper": "MuiPopover-paper",
                                                    "root": "MuiPopover-root",
                                                  }
                                                }
                                                getContentAnchorEl={[Function]}
                                                id="menu-"
                                                onClose={[Function]}
                                                onEntering={[Function]}
                                                open={false}
                                                transformOrigin={
                                                  Object {
                                                    "horizontal": "left",
                                                    "vertical": "top",
                                                  }
                                                }
                                                transitionDuration="auto"
                                              >
                                                <ForwardRef(Modal)
                                                  BackdropProps={
                                                    Object {
                                                      "invisible": true,
                                                    }
                                                  }
                                                  className="MuiPopover-root"
                                                  container={<body />}
                                                  id="menu-"
                                                  onClose={[Function]}
                                                  open={false}
                                                />
                                              </ForwardRef(Popover)>
                                            </WithStyles(ForwardRef(Popover))>
                                          </ForwardRef(Menu)>
                                        </WithStyles(ForwardRef(Menu))>
                                      </ForwardRef(SelectInput)>
                                    </div>
                                  </ForwardRef(InputBase)>
                                </WithStyles(ForwardRef(InputBase))>
                              </ForwardRef(Input)>
                            </WithStyles(ForwardRef(Input))>
                          </ForwardRef(Select)>
                        </WithStyles(ForwardRef(Select))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </div>
              </Styled(div)>
            </OrderSelect>
            <TodoList
              deleteItem={[Function]}
              toggleDone={[Function]}
              toggleImportant={[Function]}
            >
              <div
                className="list-group todo-list"
              />
            </TodoList>
            <AddItemForm
              addItem={[Function]}
            >
              <form
                onSubmit={[Function]}
              >
                <Styled(div)>
                  <div
                    className="css-1mzzuk6"
                  >
                    <Styled(div)>
                      <div
                        className="css-dza5v9"
                      >
                        <WithStyles(ForwardRef(Input))
                          fullWidth={true}
                          margin="dense"
                          onChange={[Function]}
                          placeholder="Add new task"
                          type="text"
                          value=""
                        >
                          <ForwardRef(Input)
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root",
                                "underline": "MuiInput-underline",
                              }
                            }
                            fullWidth={true}
                            margin="dense"
                            onChange={[Function]}
                            placeholder="Add new task"
                            type="text"
                            value=""
                          >
                            <WithStyles(ForwardRef(InputBase))
                              classes={
                                Object {
                                  "colorSecondary": "MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInput-formControl",
                                  "fullWidth": "MuiInput-fullWidth",
                                  "input": "MuiInput-input",
                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInput-marginDense",
                                  "multiline": "MuiInput-multiline",
                                  "root": "MuiInput-root MuiInput-underline",
                                  "underline": null,
                                }
                              }
                              fullWidth={true}
                              inputComponent="input"
                              margin="dense"
                              multiline={false}
                              onChange={[Function]}
                              placeholder="Add new task"
                              type="text"
                              value=""
                            >
                              <ForwardRef(InputBase)
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "focused": "Mui-focused Mui-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                  }
                                }
                                fullWidth={true}
                                inputComponent="input"
                                margin="dense"
                                multiline={false}
                                onChange={[Function]}
                                placeholder="Add new task"
                                type="text"
                                value=""
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-marginDense MuiInput-marginDense"
                                  onClick={[Function]}
                                >
                                  <input
                                    className="MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                    onAnimationStart={[Function]}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    placeholder="Add new task"
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(Input)>
                        </WithStyles(ForwardRef(Input))>
                      </div>
                    </Styled(div)>
                    <Styled(div)>
                      <div
                        className="css-eie7o"
                      >
                        <WithStyles(ForwardRef(Button))
                          color="primary"
                          fullWidth={true}
                          size="small"
                          type="submit"
                          variant="contained"
                        >
                          <ForwardRef(Button)
                            classes={
                              Object {
                                "colorInherit": "MuiButton-colorInherit",
                                "contained": "MuiButton-contained",
                                "containedPrimary": "MuiButton-containedPrimary",
                                "containedSecondary": "MuiButton-containedSecondary",
                                "containedSizeLarge": "MuiButton-containedSizeLarge",
                                "containedSizeSmall": "MuiButton-containedSizeSmall",
                                "disableElevation": "MuiButton-disableElevation",
                                "disabled": "Mui-disabled",
                                "endIcon": "MuiButton-endIcon",
                                "focusVisible": "Mui-focusVisible",
                                "fullWidth": "MuiButton-fullWidth",
                                "iconSizeLarge": "MuiButton-iconSizeLarge",
                                "iconSizeMedium": "MuiButton-iconSizeMedium",
                                "iconSizeSmall": "MuiButton-iconSizeSmall",
                                "label": "MuiButton-label",
                                "outlined": "MuiButton-outlined",
                                "outlinedPrimary": "MuiButton-outlinedPrimary",
                                "outlinedSecondary": "MuiButton-outlinedSecondary",
                                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                "root": "MuiButton-root",
                                "sizeLarge": "MuiButton-sizeLarge",
                                "sizeSmall": "MuiButton-sizeSmall",
                                "startIcon": "MuiButton-startIcon",
                                "text": "MuiButton-text",
                                "textPrimary": "MuiButton-textPrimary",
                                "textSecondary": "MuiButton-textSecondary",
                                "textSizeLarge": "MuiButton-textSizeLarge",
                                "textSizeSmall": "MuiButton-textSizeSmall",
                              }
                            }
                            color="primary"
                            fullWidth={true}
                            size="small"
                            type="submit"
                            variant="contained"
                          >
                            <WithStyles(ForwardRef(ButtonBase))
                              className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall MuiButton-fullWidth"
                              component="button"
                              disabled={false}
                              focusRipple={true}
                              focusVisibleClassName="Mui-focusVisible"
                              type="submit"
                            >
                              <ForwardRef(ButtonBase)
                                className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall MuiButton-fullWidth"
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "focusVisible": "Mui-focusVisible",
                                    "root": "MuiButtonBase-root",
                                  }
                                }
                                component="button"
                                disabled={false}
                                focusRipple={true}
                                focusVisibleClassName="Mui-focusVisible"
                                type="submit"
                              >
                                <button
                                  className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall MuiButton-fullWidth"
                                  disabled={false}
                                  onBlur={[Function]}
                                  onDragLeave={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  tabIndex={0}
                                  type="submit"
                                >
                                  <span
                                    className="MuiButton-label"
                                  >
                                    Add Item
                                  </span>
                                  <WithStyles(memo)
                                    center={false}
                                  >
                                    <ForwardRef(TouchRipple)
                                      center={false}
                                      classes={
                                        Object {
                                          "child": "MuiTouchRipple-child",
                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                          "ripple": "MuiTouchRipple-ripple",
                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                          "root": "MuiTouchRipple-root",
                                        }
                                      }
                                    >
                                      <span
                                        className="MuiTouchRipple-root"
                                      >
                                        <TransitionGroup
                                          childFactory={[Function]}
                                          component={null}
                                          exit={true}
                                        />
                                      </span>
                                    </ForwardRef(TouchRipple)>
                                  </WithStyles(memo)>
                                </button>
                              </ForwardRef(ButtonBase)>
                            </WithStyles(ForwardRef(ButtonBase))>
                          </ForwardRef(Button)>
                        </WithStyles(ForwardRef(Button))>
                      </div>
                    </Styled(div)>
                  </div>
                </Styled(div)>
              </form>
            </AddItemForm>
          </ErrorBoundry>
        </div>
      </Styled(div)>
    </TodoPage>
  </Connect(TodoPage)>
</Provider>
`;
