// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TodoTimer render item with data 1`] = `
<TodoTimer
  seconds={1500}
>
  <Styled(div)>
    <div
      className="css-1mzzuk6"
    >
      <WithStyles(ForwardRef(IconButton))
        aria-label="delete"
        className="btn-decrease"
        color="primary"
        onClick={[Function]}
      >
        <ForwardRef(IconButton)
          aria-label="delete"
          className="btn-decrease"
          classes={
            Object {
              "colorInherit": "MuiIconButton-colorInherit",
              "colorPrimary": "MuiIconButton-colorPrimary",
              "colorSecondary": "MuiIconButton-colorSecondary",
              "disabled": "Mui-disabled",
              "edgeEnd": "MuiIconButton-edgeEnd",
              "edgeStart": "MuiIconButton-edgeStart",
              "label": "MuiIconButton-label",
              "root": "MuiIconButton-root",
              "sizeSmall": "MuiIconButton-sizeSmall",
            }
          }
          color="primary"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ButtonBase))
            aria-label="delete"
            centerRipple={true}
            className="MuiIconButton-root btn-decrease MuiIconButton-colorPrimary"
            disabled={false}
            focusRipple={true}
            onClick={[Function]}
          >
            <ForwardRef(ButtonBase)
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root btn-decrease MuiIconButton-colorPrimary"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              disabled={false}
              focusRipple={true}
              onClick={[Function]}
            >
              <button
                aria-label="delete"
                className="MuiButtonBase-root MuiIconButton-root btn-decrease MuiIconButton-colorPrimary"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="button"
              >
                <span
                  className="MuiIconButton-label"
                >
                  <ForwardRef>
                    <WithStyles(ForwardRef(SvgIcon))>
                      <ForwardRef(SvgIcon)
                        classes={
                          Object {
                            "colorAction": "MuiSvgIcon-colorAction",
                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                            "colorError": "MuiSvgIcon-colorError",
                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                            "root": "MuiSvgIcon-root",
                          }
                        }
                      >
                        <svg
                          aria-hidden={true}
                          className="MuiSvgIcon-root"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M14 7l-5 5 5 5V7z"
                          />
                        </svg>
                      </ForwardRef(SvgIcon)>
                    </WithStyles(ForwardRef(SvgIcon))>
                  </ForwardRef>
                </span>
                <WithStyles(memo)
                  center={true}
                >
                  <ForwardRef(TouchRipple)
                    center={true}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(memo)>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(IconButton)>
      </WithStyles(ForwardRef(IconButton))>
      <Styled(div)>
        <div
          className="css-1iqntr5"
        >
          <span
            className="timer"
          >
            25:00
          </span>
        </div>
      </Styled(div)>
      <WithStyles(ForwardRef(IconButton))
        aria-label="delete"
        className="btn-increase"
        color="primary"
        onClick={[Function]}
      >
        <ForwardRef(IconButton)
          aria-label="delete"
          className="btn-increase"
          classes={
            Object {
              "colorInherit": "MuiIconButton-colorInherit",
              "colorPrimary": "MuiIconButton-colorPrimary",
              "colorSecondary": "MuiIconButton-colorSecondary",
              "disabled": "Mui-disabled",
              "edgeEnd": "MuiIconButton-edgeEnd",
              "edgeStart": "MuiIconButton-edgeStart",
              "label": "MuiIconButton-label",
              "root": "MuiIconButton-root",
              "sizeSmall": "MuiIconButton-sizeSmall",
            }
          }
          color="primary"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ButtonBase))
            aria-label="delete"
            centerRipple={true}
            className="MuiIconButton-root btn-increase MuiIconButton-colorPrimary"
            disabled={false}
            focusRipple={true}
            onClick={[Function]}
          >
            <ForwardRef(ButtonBase)
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root btn-increase MuiIconButton-colorPrimary"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              disabled={false}
              focusRipple={true}
              onClick={[Function]}
            >
              <button
                aria-label="delete"
                className="MuiButtonBase-root MuiIconButton-root btn-increase MuiIconButton-colorPrimary"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="button"
              >
                <span
                  className="MuiIconButton-label"
                >
                  <ForwardRef>
                    <WithStyles(ForwardRef(SvgIcon))>
                      <ForwardRef(SvgIcon)
                        classes={
                          Object {
                            "colorAction": "MuiSvgIcon-colorAction",
                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                            "colorError": "MuiSvgIcon-colorError",
                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                            "root": "MuiSvgIcon-root",
                          }
                        }
                      >
                        <svg
                          aria-hidden={true}
                          className="MuiSvgIcon-root"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 17l5-5-5-5v10z"
                          />
                        </svg>
                      </ForwardRef(SvgIcon)>
                    </WithStyles(ForwardRef(SvgIcon))>
                  </ForwardRef>
                </span>
                <WithStyles(memo)
                  center={true}
                >
                  <ForwardRef(TouchRipple)
                    center={true}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(memo)>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(IconButton)>
      </WithStyles(ForwardRef(IconButton))>
      <Styled(div)>
        <div
          className="css-1yv2e18"
        >
          <WithStyles(ForwardRef(Button))
            className="btn-start"
            color="primary"
            disabled={false}
            onClick={[Function]}
            size="small"
            variant="contained"
          >
            <ForwardRef(Button)
              className="btn-start"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disabled={false}
              onClick={[Function]}
              size="small"
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-contained btn-start MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-contained btn-start MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-contained btn-start MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Start
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
          <WithStyles(ForwardRef(Button))
            className="btn-reset"
            color="default"
            onClick={[Function]}
            size="small"
            variant="contained"
          >
            <ForwardRef(Button)
              className="btn-reset"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="default"
              onClick={[Function]}
              size="small"
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-contained btn-reset MuiButton-containedSizeSmall MuiButton-sizeSmall"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-contained btn-reset MuiButton-containedSizeSmall MuiButton-sizeSmall"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-contained btn-reset MuiButton-containedSizeSmall MuiButton-sizeSmall"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Reset
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </div>
      </Styled(div)>
    </div>
  </Styled(div)>
</TodoTimer>
`;
